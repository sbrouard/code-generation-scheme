#lang racket

;;BINARY
(define (gen-string-bin n)
  (cond [(= n 1) '(1)]
        [(even? n) (append (gen-string-bin (/ n 2)) (list n))]
        [else (append (gen-string-bin (sub1 n)) (list n))]))


(define (test-gen-bin)
;  (and
  (printf "1 : '(1)\n")
  (printf "4 : '(1 2 4)\n")
  (printf "87: '(1 2 4 5 10 20 21 42 43 86 87)\n")
  (printf "5 : '(1 2 4 5)\n")
  (printf "test:\n")
  (values (gen-string-bin 1)
          (gen-string-bin 4)
          (gen-string-bin 87)
          (gen-string-bin 5))
  )

;(test-gen-bin)

;;DECOMPOSITION IN BASE 10
(define (gen-string-unity n)
  (cond [(= n 1) '(1)]
        [(= n 2) '(1 2)]
        [(= n 3) '(1 2 3)]
        [(= n 4) '(1 2 4)]
        [(= n 5) '(1 2 3 5)]
        [(= n 6) '(1 2 4 6)]
        [(= n 7) '(1 2 3 6 7)]
        [(= n 8) '(1 2 4 8)]
        [(= n 9) '(1 2 4 8 9)]
        [(= n 0) '(1 2 3 5)]
        ))


(define (gen-string-compl n)
  (cond [(= n 0) '()]
        [(= n 1) '(2 3 5)]
        [(= n 2) '(3 5)]
        [(= n 3) '(5)]
        [(= n 4) '(8)]
        [(>= n 5) '()]
        ))

(define (gen-string-aux n)
  (cond [(<= n 10) (gen-string-unity n)]
        [else (append (gen-string-unity (modulo n 10)) (gen-string-compl (modulo n 10)) (map (lambda (x) (* x 10)) (gen-string-aux (quotient n 10))))]))

;(gen-string-aux 47)

(define (gen-string-complete n p)
  (cond [(zero? p) '()]  
        [else
         (if (zero? (modulo (quotient n (expt 10 (sub1 p))) 10)) (gen-string-complete n (sub1 p)) 
             (append (list (* (quotient n (expt 10 (sub1 p))) (expt 10 (sub1 p)))) (gen-string-complete n (sub1 p))))]))

;(gen-string-complete 887 2)

(define (power-10 n)
  (if (< n 10) 0
      (add1 (power-10 (quotient n 10)))))

;(power-10 87)
;(power-10 1)
;(power-10 1000)


(define (gen-string n)
  (append (gen-string-aux n) (gen-string-complete n (power-10 n))))

;(gen-string 87)
;(gen-string 873)

(define (test-gen-string)
  (printf "1 : '(1)\n")
  (printf "4 : '(1 2 4)\n")
  (printf "87: '(1 2 3 6 7 10 20 40 80 87)\n")
  (printf "953 : '(1 2 3 5 10 20 30 50 100 200 400 800 900 950 953)\n")
  (printf "test:\n")
  (values (gen-string 1)
          (gen-string 4)
          (gen-string 87)
          (gen-string 953)))

;(test-gen-string)

;(define (compare-methods)
;  (
;
;(time (gen-string 800000000000000000000000000000000000000000000000000000000000000000000077777777777777777777777777777777777770000000000000000000000000)) ;;plus lent que le binaire
;(time (gen-string-bin 800000000000000000000000000000000000000000000000000000000000000000000077777777777777777777777777777777777770000000000000000000000000)) ;;meilleure version pour le moment
;((lambda (r s t u)(s)) (values (time-apply gen-string '(8000000000000000000000000;
(define (my-time proc n)
  (call-with-values (lambda () (time-apply proc (list n))) (lambda (r s t u) s)))

(define (test-time proc1 proc2)
  (let* ([cpt1 0]
         [cpt2 0]
         [n1 7321001]
         [n2 14860684680440646464005241]
         [n3 8143100476314668477613488796413]
         [n4 (expt 2 50)]
         [cpt1 (if (< (my-time proc1 n1) (my-time proc2 n1)) ;;on incrÃ©mente de 1 quand la fonction est plus rapide
                   (add1 cpt1)
                   cpt1)]
         [cpt2 (if (> (my-time proc1 n1) (my-time proc2 n1)) 
                   (add1 cpt2)
                   cpt2)]
         [cpt1 (if (< (my-time proc1 n2) (my-time proc2 n2)) 
                   (add1 cpt1)
                   cpt1)]
         [cpt2 (if (> (my-time proc1 n2) (my-time proc2 n2)) 
                   (add1 cpt2)
                   cpt2)]
         [cpt1 (if (< (my-time proc1 n3) (my-time proc2 n3)) 
                   (add1 cpt1)
                   cpt1)]
         [cpt2 (if (> (my-time proc1 n3) (my-time proc2 n3)) 
                   (add1 cpt2)
                   cpt2)]
         [cpt1 (if (< (my-time proc1 n4) (my-time proc2 n4)) 
                   (add1 cpt1)
                   cpt1)]
         [cpt2 (if (> (my-time proc1 n4) (my-time proc2 n4)) 
                   (add1 cpt2)
                   cpt2)])
    (cond [(< cpt1 cpt2) (print "la fonction 2 est plus rapide")]
          [(> cpt1 cpt2) (print "la fonction 1 est plus rapide")]
          [else (print "les deux fonctions sont de meme rapidite")])))

;(my-time gen-string 604616546046451301)
;(test-time gen-string-bin gen-string) 
;(- (my-time gen-string 80000000000000000000000000000000000000000460400000000000000000000000000000000000000) (my-time gen-string-bin 80000000000000000000000000000000000000000460400000000000000000000000000000000000000))
;(gen-string 10);GEN STRING A UN PROBLEME QUAND ON A UNE PUISSANCE DE 10

;;NEW METHOD


(define (gen-string-eucl-aux n m l)
  (cond [(and (= n 1) (= m 1)) (cons 1 l)]
        [(< n 1) l]
        [(= n m) (gen-string-eucl-aux n (ceiling (/ n 2)) l)]
        [else (append (gen-string-eucl-aux (min n m) (- (max n m) (min n m)) l) (list (max n m)))]))

;(gen-string-eucl-aux 52 18 '())
;(gen-string-eucl-aux 52 (ceiling (/ 31 2)) '())


(define (gen-string-eucl n)
  (gen-string-eucl-aux n (+ (ceiling (/ n 2)) 1) '()))



(define (gen-string-e-aux n m l)
  (cond [(and (zero? m) (null? l)) (cons 1 l)]
        [(and (zero? m) (= 1 (car l)) l)]
        [(and (zero? m) (not (= 1 (car l)))) (gen-string-e-aux (sub1 n) m l)]
        [else (append (gen-string-e-aux m (modulo n m) l) (list n))]))

;(gen-string-e-aux 30 18 '())