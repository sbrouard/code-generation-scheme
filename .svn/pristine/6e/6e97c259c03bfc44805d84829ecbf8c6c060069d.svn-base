#lang racket

;(require "fichier") ; utiliser
;(provide truc) ; fournir

;; --------------Verif----------------------

;;verifier que la liste est strictement croissante -> fonction specifique ? OK
;;verif 1er elt=1  ->algo general  OK
;;verif chaque elt est somme des precedent, 
;puis le rajouter dans le liste des 1ers elts ->fonction is_sum OK


(define (is-growing? l)
  (cond [(null? l) #t]
        [(null? (cdr l)) #t]
        [(= (car l) (car (cdr l))) #f]
        [(> (car l) (car (cdr l))) #f]
        [else (is-growing? (cdr l))]))

;(is-growing? '(1 2 3 4))
;(is-growing? '( 4 2 3 5))
;(is-growing? '())
;(is-growing? '(1 2 5 3 8 9))
;(is-growing? '(42))
;(is-growing? '(2 3 4 5 1))
;(is-growing? '(1 2 2 3))


(define (is-sum? l x)
  (cond [(null? l) #f]
        [(= x (+ (car l) (last l))) #t]
        [(< x (+ (car l) (last l))) (is-sum? (remove (last l) l) x)]
        [(> x (+ (car l) (last l))) (is-sum? (cdr l) x)]
        ))

;(is-sum? '(1 2 4 5) 8)
;(is-sum? '(1 2 3) 5)
;(is-sum? '(1 2 4 5) 11)
;(is-sum? '() 3)
;(is-sum? '() 1)
;(is-sum? '(1) 2)
;(is-sum? '(2 4 6) 8)


(define (all-are-sum? l1 l2) ;attention, l1 doit etre non vide (contient car de l et l 2 cdr de l)
  (cond [(null? l2) #t]
        [(null? l1) #f]
        [(not (is-sum? l1 (car l2))) #f]
        [else (all-are-sum? (append l1 (list (car l2))) (cdr l2))]))

;(all-are-sum? '(1) '(2 3 6 7 10))
;(all-are-sum? '() '(1 2 3))
;(all-are-sum? '(1) '(2 5 7))
;(all-are-sum? '(1) '())
;(all-are-sum? '(1) '(2))


(define (is-addlist? l)
  (cond [(null? l) #f]
        [(not (= 1 (car l))) #f]
        [(not (is-growing? l)) #f]
        [else (all-are-sum? (list (car l)) (cdr l))]))

;(time (is-addlist? '(1 2 4 8 10 11 12 13 14 15 16 18 20 28 29 40 80 84 88)))
;(is-addlist? '(1 2 4 5 10 20 21 42 43 86 87))
;(is-addlist? '(2 4 6 8))
;(is-addlist? '(1 2 5))
;(is-addlist? '())
;(is-addlist? '(1))
;(is-addlist? '(1 4 3 0))
;(is-addlist? '(1 2 2 4))




;; ---------exponentiation  (naif)--------------------

(define (sum-of l x)  ;; return two elements of l which sum gives x
  (cond [(null? l) (raise "ERROR")]
        ;[(null? (cdr l)) (list 0 (car l))] ;; ligne a supprimer (a verifier)
        [(= x (+ (car l) (last l))) (list (car l) (last l))]
        [(< x (+ (car l) (last l))) (sum-of (remove (last l) l) x)]
        [(> x (+ (car l) (last l))) (sum-of (cdr l) x)]
        ))

;(sum-of '(1) 2)

(define (delete-greater x l) ; deletes all elements greater than x in l 
  (cond [(null? l) l]
        [(= (last l) x) l] ; l must be growing
        [else (delete-greater x (remove x l <))]))

;(delete-greater 3 '(1 2 3 4 5))

(define (exponentiation x l) ; code moche
  (cond [(not (is-addlist? l)) (raise "ERROR : require an add-list")]
        [(null? (cdr l)) x]
        [else 
         (let ([p (sum-of l (last l))])
           (* (cond [(= 0 (car p)) 1] ; ligne probablement inutile
                    [(= 1 (car p)) x]
                    [else (exponentiation x (delete-greater (car p) l))])
              (cond [(= 1 (cadr p)) x]
                    [(exponentiation x (delete-greater (cadr p) l))])))]))

;(exponentiation 3 '(1 2 3)) ;; 3³=27 



;; -------------------exponentiation  (mieux ?) -------------------

(define (replace elt new l) ;elt -> int (new -> list)
  (cond [(null? l) (raise "ERROR : elt is not in the list")]
        [(list? (car l)) (cons (car l) (replace elt new (cdr l)))]
        [(= elt (car l)) (cons new (cdr l))]
        [else (cons (car l) (replace elt new (cdr l)))]))

;(replace 2 42 '(1 2 3))
;(replace 9 42 '(1 2 3))
;(replace 2 '(2 4) '(1 2 3))
;(replace 2 '(2) '(1 2 3))



(define (create-list-of-list l lcomp) ; at the beginning : l=lcomp
  (if (null? l)
      lcomp
      (create-list-of-list (cdr l) (replace (car l) (list (car l)) lcomp))))

;(create-list-of-list '(1 2 3) '(1 2 3))


(define (exponentiation-stock x l lcomplete) ; code moche
  (cond [(not (is-addlist? l)) (raise "ERROR : require an add-list")]
        [(not (null? (cdr (last l)))) (cdr (last l))] 
        [(null? (cdr l)) x]
        [else 
         (let ([p (sum-of l (last l))])
           (* (cond [(= 0 (car p)) 1] ; ligne probablement inutile
                    [(= 1 (car p)) x]
                    [else (exponentiation-stock x (delete-greater (car p) l) lcomplete)])
              (cond [(= 1 (cadr p)) x]
                    [(exponentiation-stock x (delete-greater (cadr p) l) lcomplete)])))]))

(define (exponentiation-init x l)
  (let ([ll (create-list-of-list l l)])
    (exponentiation-stock x ll ll)))

(exponentiation-init 3 '(1 2 3)) ;; 3³=27 


        