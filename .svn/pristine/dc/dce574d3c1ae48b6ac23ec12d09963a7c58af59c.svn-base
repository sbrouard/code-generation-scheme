#lang racket


(require "./algo_scheme.rkt")
;(require "./verif.rkt")



; replace in the list l the element elt by new
; ex : (replace 2 42 '(1 2 3)) -> '(1 42 3)
(define (replace-in-list elt new l) ;elt -> int (new -> list)
  (cond [(null? l) l]
        [(list? (car l)) (cons (car l) (replace elt new (cdr l)))]
        [(equal? elt (car l)) (cons new (replace-in-list elt new (cdr l)))]
        [else (cons (car l) (replace-in-list elt new (cdr l)))]))

;(replace-in-list 1 'x1 '(2 1 1))

; replace in alist the element elt by new
; ex : (replace 1 x1 '((2 1 1) (3 2 1))) -> '((2 x1 x1) (3 2 x1))
(define (replace elt new alist)
  (if (null? alist)
      alist
      (cons (replace-in-list elt new (car alist)) (replace elt new (cdr alist)))))


;(replace  2 'x2 '((1 0 0) (2 1 1) (3 2 1)))




;;;;;;;;;;;;;;;;  generation code C ;;;;;;;;;;;;;;;;

(define (entete-file file)
  (fprintf file "#include <stdio.h>\n")
  (fprintf file "#include <stdlib.h>\n\n\n\n"))

(define (entete-function file n)
  (fprintf file "int exp~a(int x){\n" n))



; l = the end of an 'a-addlist'  ex : '((3 2 1) (5 3 2) (7 5 2))
; find if a variable is used again to compute x**n = if n is in l
; ex : (is-reused-variable? 2 '((3 2 1) (5 3 2))) -> #t
(define (is-reused-variable? n l)
  (cond [(null? l) #f]
        [(or (equal? n (caddr (car l))) (equal? n (cadr (car l)))) #t]
        [(null? (cdr l)) #f]
        [(or (equal? 'x (cadr l)) (number? (cadr l)) (equal? n (cadr (car l)))) #t]
        [else (is-reused-variable? n (cdr l))]))


;(is-reused-variable? 2 '((3 2 1) (5 3 2)))
;(is-reused-variable? 1 '((5 3 2) (8 5 3)))
;(is-reused-variable? 1 '((3 2 1)))
;(is-reused-variable? 'x1 '((3 2 x1)))
(is-reused-variable? 'x1 '((4 x1 x2)))
(is-reused-variable? 'x1 '((x1 x2 x2) (2 x2 x2)))



;new-variable : name of the variable where we put n ex : x5
;alist  ex : '((1 0 0) (2 x1 x1) (3 x2 x1))
;ex : (modify-variable-name '((1 0 0) (2 x1 x1) (3 x2 x1) (6 x3 x3)) 3 'x2)
; -> '((1 0 0) (2 x1 x1) (3 x2 x1) (6 x2 x2))
(define (modify-variable-name alist n new-variable)
  (replace n new-variable alist))

;(modify-variable-name '((1 0 0) (2 1 1) (3 2 1) (6 3 3)) 3 'x2)






;;;;;;;; in-place ;;;;;;;;;;;;;;;;

; list  ex : '(3 x2 x1)
; cariable-list ex : '() / '(x1 x2)
; ex : (affectation-out '(5 x3 x2) '((10 5 5) (15 10 5)) '() file)  -> '(((10 x5 x5) (15 10 x5)) (x2 x3))
; return : l; (car l) = alist, (cdr l) = variable-list
(define (affectation-in list3 alist variable-list file)
  (cond [(or (null? variable-list) (void? variable-list))
        ;(print variable-list)
         ;(modify-variable-name alist (car list3) (string->symbol (string-append "x" (number->string (car list3)))))
;         (cond [(and (not (is-reused-variable? (cadr list3) (cdr alist))) (not (equal? 'x (cadr list3))) (not (number? (cadr list3)))) 
;                (fprintf file "~a *= ~a;\n" (cadr list3) (caddr list3))]
;               [(and (not (is-reused-variable? (caddr list3) (cdr alist))) (not (equal? 'x (caddr list3))) (not (number? (caddr list3)))) 
;                (fprintf file "~a *= ~a;\n" (caddr list3) (cadr list3))]
;               [else (fprintf file "int ~a = ~a * ~a;\n" (string->symbol (string-append "x" (number->string (car list3)))) (cadr list3) (caddr list3))])
;         
         
         ;(let* ;[variable-list1 (cond [(and (not (is-reused-variable? (cadr list3) (cdr alist))) (not (equal? 'x (cadr list3))) (not (number? (cadr list3))))
;                                 ;(if (not (is-reused-variable? (cadr list3) (cdr alist)))
;                                       (fprintf file "~a *= ~a;\n" (cadr list3) ( caddr list3))
;                                        variable-list]
;                                      [else variable-list])]
         (let* ([variable-list2 (cond [(and (not (is-reused-variable? (caddr list3) (cdr alist)))
                                            (or (is-reused-variable? (cadr list3) (cdr alist)) (equal? 'x (cadr list3)))
                                            (not (equal? (cadr list3) (caddr list3))) (not (equal? 'x (cadr list3))) (not (number? (cadr list3))))
                                    ;(if (not (is-reused-variable? (caddr list3) (cdr alist)))         
                                       
                                       (cond [(null? (cdr alist))
                                              (fprintf file "~a *= ~a;\n" (caddr list3) (cadr list3))
                                              (fprintf file "return ~a;\n" (caddr list3))]
                                             [else (fprintf file "~a *= ~a;\n" (caddr list3) (cadr list3))])
                                       variable-list]

                                      
                                      [(and (not (is-reused-variable? (caddr list3) (cdr alist)))
                                            (not (is-reused-variable? (cadr list3) (cdr alist)))
                                            (not (equal? (cadr list3) (caddr list3))) (not (equal? 'x (cadr list3))) (not (number? (cadr list3))))     
                                       (print "coucou")
                                       (print alist)
                                       (print (is-reused-variable? 'x1 '((4 x1 3))))
                                       (cond [(null? (cdr alist))
                                              (fprintf file "~a *= ~a;\n" (cadr list3) (caddr list3))
                                              (fprintf file "return ~a;\n" (cadr list3))]
                                             [else (print list3) (fprintf file "~a *= ~a;\n" (cadr list3) (caddr list3))])
                                       (cons (caddr list3) variable-list)]
                                      
                                      
                                      [(and (not (is-reused-variable? (caddr list3) (cdr alist)))
                                            (not (is-reused-variable? (cadr list3) (cdr alist)))
                                            (equal? (cadr list3) (caddr list3)) (not (equal? 'x (cadr list3))) (not (number? (cadr list3))))     
                                       
                                       (cond [(null? (cdr alist))
                                              (fprintf file "~a *= ~a;\n" (cadr list3) (caddr list3))
                                              (fprintf file "return ~a;\n" (cadr list3))]
                                             [else (fprintf file "~a *= ~a;\n" (cadr list3) (caddr list3))])
                                       variable-list]
                                      [else  (cond [(null? (cdr alist)) 
                                                   (fprintf file "int ~a = ~a * ~a;\n" (string->symbol (string-append "x" (number->string (car list3)))) (cadr list3) (caddr list3))
                                                   (fprintf file "return ~a;\n" (string->symbol (string-append "x" (number->string (car list3)))))]
                                                  [else (fprintf file "int ~a = ~a * ~a;\n" (string->symbol (string-append "x" (number->string (car list3)))) (cadr list3) (caddr list3))])
                                            variable-list])]
                                      
 
                      [var-name (cond [(and (not (is-reused-variable? (caddr list3) (cdr alist)))
                                            (or (is-reused-variable? (cadr list3) (cdr alist))
                                                (equal? 'x (cadr list3)))
                                            (not (equal? 'x (caddr list3))) (not (number? (caddr list3))))
                                       (modify-variable-name alist (car list3) (caddr list3))]
                       
                                      [(and (not (is-reused-variable? (cadr list3) (cdr alist)))
                                            (not (equal? 'x (cadr list3))) (not (number? (cadr list3)))) ; pb ici
                                       (modify-variable-name alist (car list3) (cadr list3))]
                      
                                      [else
                                       ;(and (is-reused-variable? (caddr list3) (cdr alist))
                                       ;    (is-reused-variable? (cadr list3) (cdr alist)))
                                       (modify-variable-name alist (car list3) (string->symbol (string-append "x" (number->string (car list3)))))])]
                       
                       
                
                      ;[var-name (modify-variable-name alist (car list3) (string->symbol (string-append "x" (number->string (car list3)))))]
                      [l (list var-name variable-list2)])
                      l)]
           ;(print l))
          
         ;(cons (string->symbol (string-append "x" (number->string (car list)))) variable-list)
         
         [else ;(modify-variable-name alist (car list3) (car variable-list))
              ;(remove (car variable-list) variable-list)
              ;(print "else")
         ;(print variable-list)
          (cond [(null? (cdr alist))
                 (fprintf file "~a = ~a * ~a;\n" (car variable-list)  (cadr list3) (caddr list3))
                 (fprintf file "return ~a;\n" (car variable-list))]
                [else (fprintf file "~a = ~a * ~a;\n" (car variable-list)  (cadr list3) (caddr list3))])
              ;(remove (car variable-list) variable-list)]))
          (let* ([a (modify-variable-name alist (car list3) (car variable-list))]
                 [b (remove (car variable-list) variable-list)]
                 [c (if (and (not (is-reused-variable? (cadr list3) (cdr alist)))
                             (not (equal? 'x (cadr list3))) (not (number? (cadr list3))))
                        (cons (cadr list3) b)
                        b)]
                 [d (if (and (not (is-reused-variable? (caddr list3) (cdr alist)))
                             (not (equal? (cadr list3) (caddr list3))) (not (equal? 'x (caddr list3))) (not (number? (cadr list3))))
                        (cons (cadr list3) b)
                        c)]
                     ; ajouter les variables non réutilisées
                 [e (list a b) ])
            e)]))
  



(define (all-affectation-in alist variable-list file) ; pb tjs variable-list='()
  (cond [(not (null? alist)) 
         (let* ([l (affectation-in (car alist) alist variable-list file)])         
           (all-affectation-in (cdr (car l)) (cadr l) file))]))
      

(define (complete-file-in file l)
  (entete-file file)
  (entete-function file (last l))
  (cond [(null? l) (raise "ERROR : l musn't be empty")]
        [(null? (cdr l)) (all-affectation-out '(1 x 1))]
        [else (print (cons '(1 x 1) (cdr (addlist2list-of-list l l '())))) (all-affectation-in (cons '(1 x 1) (cdr (addlist2list-of-list l l '()))) '() file)])
  (fprintf file "}")
  )


;;;;;;;; out-place ;;;;;;;;;;;;;;;

; list  ex : '(3 x2 x1)
; cariable-list ex : '() / '(x1 x2)
; ex : (affectation-out '(5 x3 x2) '((10 5 5) (15 10 5)) '() file)  -> '(((10 x5 x5) (15 10 x5)) (x2 x3))
; return : l; (car l) = alist, (cdr l) = variable-list
(define (affectation-out list3 alist variable-list file)
  (cond [(null? variable-list) 
         
         ;(modify-variable-name alist (car list3) (string->symbol (string-append "x" (number->string (car list3)))))
         (cond [(null? (cdr alist))
                (fprintf file "int ~a = ~a * ~a;\n" (string->symbol (string-append "x" (number->string (car list3)))) (cadr list3) (caddr list3))
                (fprintf file "return ~a;\n" (string->symbol (string-append "x" (number->string (car list3)))))]
               [else (fprintf file "int ~a = ~a * ~a;\n" (string->symbol (string-append "x" (number->string (car list3)))) (cadr list3) (caddr list3))])
         (let* ([variable-list1 (if (and (not (is-reused-variable? (cadr list3) (cdr alist))) (not (equal? 'x (cadr list3))) (not (number? (cadr list3))))
                                 ;(if (not (is-reused-variable? (cadr list3) (cdr alist)))
                                    (cons (cadr list3) variable-list)
                                    variable-list)]
                [variable-list2 (if (and (not (is-reused-variable? (caddr list3) (cdr alist))) (not (equal? (cadr list3) (caddr list3))) (not (equal? 'x (cadr list3))) (not (number? (cadr list3))))
                                    ;(if (not (is-reused-variable? (caddr list3) (cdr alist)))
                                    (cons (caddr list3) variable-list1)
                                    variable-list1)]
                [var-name (modify-variable-name alist (car list3) (string->symbol (string-append "x" (number->string (car list3)))))]
                [l (list var-name variable-list2)])
           l)
           ;(print l))
           
         ;(cons (string->symbol (string-append "x" (number->string (car list)))) variable-list)
         ]
        ;(modify-variable-name alist (car list3) (car variable-list))
              ;(remove (car variable-list) variable-list)
              ;(print "else")
        [else (cond [(null? (cdr alist))
                     (fprintf file "~a = ~a * ~a;\n" (car variable-list)  (cadr list3) (caddr list3))
                     (fprintf file "return ~a;\n" (car variable-list))]
                    [else (fprintf file "~a = ~a * ~a;\n" (car variable-list)  (cadr list3) (caddr list3))])
              ;(remove (car variable-list) variable-list)]))
              (let* ([a (modify-variable-name alist (car list3) (car variable-list))]
                     [b (remove (car variable-list) variable-list)] 
                     [c (list a b) ])
                c)]))
  


; alist == alist-end at the beginning
;(define (all-affectation-out alist variable-list file)
;  (cond [(not (null? alist)) (all-affectation-out (cdr alist) (affectation-out (car alist) alist variable-list file) file)]))
;      

(define (all-affectation-out alist variable-list file) ; pb tjs variable-list='()
  (cond [(not (null? alist)) 
         ;(print variable-list)
         (let* ([l (affectation-out (car alist) alist variable-list file)])         
           (all-affectation-out (cdr (car l)) (cadr l) file))]))
      

;(cadr '(((10 x5 x5) (15 10 x5)) (x2 x3)))


;write the total file needed in c in file
(define (complete-file-out file l)
  (entete-file file)
  (entete-function file (last l))
  (cond [(null? l) (raise "ERROR : l musn't be empty")]
        [(null? (cdr l)) (all-affectation-out '(1 x 1))]
        [else (all-affectation-out (cons '(1 x 1) (cdr (addlist2list-of-list l l '()))) '() file)])
  (fprintf file "}")
  )





;;;;;;;;;;;;;; test ;;;;;;;;;;;;;;;


(define file (open-output-file "test.c"))
;
;(entete-file file)
;(entete-function file 2)
;(cdr (car (affectation-out '(1 x 1) '((1 x 1) (2 1 1)) '() file)))
;(affectation-out '(5 x3 x2) '((10 5 5) (15 10 5)) '() file)
;(affectation-out '(10 x5 x5) '((15 10 x5)) '(x2 x3) file)
;(affectation-out (car (cdr (car '(((10 x5 x5) (15 10 x5)) (x2 x3)))))  (cdr (car '(((10 x5 x5) (15 10 x5)) (x2 x3))))  (cadr '(((10 x5 x5) (15 10 x5)) (x2 x3))) file)
;(affectation-out '(5 x3 x2) '((10 5 5) (15 10 5)) (list 'x1) file)
;(affectation-out '(1 0 0) '((1 0 0) (2 x1 x1) (3 x2 x1) (6 x3 x3)) (list (string->symbol (string-append "x" (number->string 42))) (string->symbol (string-append "x" (number->string 43)))))
;(all-affectation-out '((1 x 1) (2 1 1) (3 2 1) (6 3 3)) '() file)
;(all-affectation-out '((1 x 1) (2 1 1)) '() file)
;(all-affectation-out '((1 x 1) (2 1 1) (3 2 1) (6 3 3)) '() file)
;(all-affectation-out '((2 x1 x1) (4 2 2)) (list 'x1) file)
;(all-affectation-out '((1 x 1) (2 1 1) (4 2 2)) (list) file)
;(complete-file-out file '(1 2 3 4))
;;(complete-file-out file '((1 x 1) (2 1 1) (3 2 1) (6 3 3)))
;;(complete-file-out file '((1 x 1) (2 1 1) (3 2 1) (6 3 3) (9 6 3)))

;(affectation-in '(5 x3 x2) '((10 5 5) (15 10 5)) '() file)
;(all-affectation-in '((1 x 1) (2 1 1) (3 2 1) (6 3 3) (9 6 3)) '() file) ; pb 
;(complete-file-in file '(1 2 3 4))
;(complete-file-in file '(1 2 4 6))
(complete-file-in file '(1 2 3 5 7 9))

;
(close-output-port file)