#lang racket


;;-----------------------------generation---------------------------------



(define (constr-let op l x) 
  (cond [(null? l) l]
        [(= 1 (car (car l))) (cons 
                              (cons (string->symbol (string-append "x" (number->string (car (car l))))) '(x))
                               (constr-let op (cdr l) x))]
        [else (cons (cons (string->symbol (string-append "x" (number->string (car (car l))))) 
                  (list (list op 
                        (string->symbol (string-append "x" (number->string (cadr (car l)))))
                        (string->symbol (string-append "x" (number->string(cadr (cdr (car l)))))))))
                    (constr-let op (cdr l) x))]))






(define (constr-let-final op ldeb lfin x)
  (if (null? lfin)
      (append ldeb '(x))
      (constr-let-final op (append ldeb (list (car lfin))) (cdr lfin) x)))









(define (constr-function val op x l) ;;'(define (exp10 * x) (let* (x1 x) (x2 (* x1 x1)) (x3 (* x2 x1)) (x5 (* x3 x2)) x))
  (let* ([nom (string->symbol (string-append "exp" (number->string val)))]
         [name (cons 'define (cons (list nom op 'x)
                                   (list (constr-let-final op (list 'let*) (list (constr-let op (cdr l) 'x)) 'x))))])
    name))



(define l (constr-function 10 '* 2 '((1 0 0) (2 1 1) (3 2 1) (5 3 2)))) ;; It works !!!!






l
